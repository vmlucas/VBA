'Enum
Public Enum ErrorType
    xlEtInfo
    xlEtWarning
    xlEtError
End Enum

'Colunas para a planilha original
Dim ESTRATEGIA_COL As Integer
Dim CAMPANHA_COL As Integer
Dim RESUMO_COL As Integer
Dim PLANO_OFERTA_COL As Integer
Dim OFERTA_COL As Integer
Dim PRECO_FX_COL As Integer
Dim PRECO_MVL_COL As Integer
Dim PRECO_SVA_COL As Integer
Dim VAL_MULTA_COL As Integer
Dim FIDELIDADE_COL As Integer
Dim BENEFICIO_TIPO_COL As Integer
Dim LAST_VELOX_COL As Integer
Dim FIRST_VELOX_COL As Integer
Dim LAST_MOV_FR_COL As Integer
Dim FIRST_MOV_FR_COL As Integer
Dim STEP_VELOX_COL As Integer
Dim STEP_MOV_FR_COL As Integer
Dim FRANQ_DADOS_COL As Integer
Dim LAST_TV_COL As Integer
Dim FIRST_TV_COL As Integer
Dim STEP_TV_COL As Integer
Dim MULTA_COL As Integer

'Colunas para a coluna a ser criada
Dim PLANO_FIXO_COL As Integer
Dim PRE_SEL_CONT_ONLINE_COL As Integer
Dim PRECO_TARGT_OFR_COL As Integer
Dim FRANQUIA_VCLD_COL As Integer
Dim ALAVANCA_COL As Integer
Dim PRECO_TOTAL_COL As Integer
Dim PRECO_MVL_VOZ_COL As Integer
Dim PRECO_MVL_DADOS_COL As Integer
Dim PRECO_FIXO_FID_COL As Integer
Dim PRECO_PLANO_TV_COL As Integer
Dim PRECO_LD_CFIDEL_COL As Integer
Dim PRECO_VC_CFIDEL_COL As Integer
Dim PRECO_VX_SSVA_COL As Integer
Dim PRECO_VX_CSVA_COL As Integer
Dim PRECO_VX_SVA_FID_COL As Integer
Dim CAMPANHA_VOZ_SLD_SVC_FIDEL_COL As Integer
Dim CAMPANHA_VOZ_SLD_CVC_FIDEL_COL As Integer
Dim CAMPANHA_VOZ_CLD_SVC_FIDEL_COL As Integer
Dim CAMPANHA_VOZ_CLD_CVC_FIDEL_COL As Integer
Dim OFERTA_VOZ_SLD_SVC_FIDEL_COL As Integer
Dim OFERTA_VOZ_SLD_CVC_FIDEL_COL As Integer
Dim OFERTA_VOZ_CLD_SVC_FIDEL_COL As Integer
Dim OFERTA_VOZ_CLD_CVC_FIDEL_COL As Integer
Dim BUNDLE_OFERTA_COL As Integer
Dim MIN_VC_OFERTA_COL As Integer
Dim MIN_LD_OFERTA_COL As Integer
Dim MULTA_FID_COL As Integer
Dim OPCAO_SVA_COL As Integer
Dim OPCAO_SD_COL As Integer
Dim TIPO_PRECO_COL As Integer
Dim MESES_FIDEL_COL As Integer
Dim VELOC_VX_COL As Integer
Dim MOVEL_PKG_COL As Integer
Dim DADOS_MVL_COL As Integer
Dim FRANQUIA_VC_COL As Integer
Dim LABEL_COL As Integer
Dim PRE_SEL_MOVEL_COL As Integer
Dim CLASSIF_PRECO_COL As Integer
Dim EMPACK_COL As Integer
Dim PRE_SEL_TV_COL As Integer
Dim PLANO_TV_DVR_COL As Integer
Dim OFERTA_DVR_COL As Integer
Dim NIVEL_PRECO_COL As Integer

'Novos intervalos da planilha sem fidelidade
Dim NEW_LABEL_COL As Integer
Dim NEW_FRANQUIA_VCLD_COL As Integer
Dim NEW_ALAVANCA_COL As Integer
Dim NEW_KEY_COL As Integer
Dim NEW_TIPO_PRECO_COL As Integer
Dim NEW_NIVEL_PRECO_COL As Integer
Dim NEW_MESES_FIDEL_COL As Integer
Dim NEW_EMPACK_COL As Integer
Dim NEW_CLASSIF_PRECO_COL As Integer

'linhas iniciais de processamento
Dim INI_LINE_PROD As Integer
Dim INI_LINE_RES As Integer
Dim END_COL_RES As Integer
Dim KEY_COL As Integer

'Valores de origem de planilha
Dim AQUISICAO_DEFAULT As String
Dim MIGRACAO_DEFAULT As String
Dim RETENCAO_DEFAULT As String

'Planilha de tratamento de erro
Dim ERROR_WORKSHEET As String
Dim ERROR_LINE_COL As String
Dim ERROR_MSG_COL As String
Dim ErrorLine As Long

Dim LastColumn As Long
Dim LineColumn As Long
Dim ErrorColumn As Long

'Planilhas de tratamento
Dim SFIDEL_WORKSHEET As String
Dim ONNET_WORKSHEET As String
Dim ALLNET_WORKSHEET As String
Dim SFIDEL_TEMP As String

'Mensagens de erro
Dim BENEFICIO_NFOUND_ERROR As String
Dim COMB_BENEFICIO_ERROR As String
Dim SPEED_FMT_ERROR As String
Dim FRANQUIA_NFOUND_ERROR As String
Dim FRAN_DADOS_NFOUND_ERROR As String
Dim FRANQUIA_FMT_ERROR As String
Dim ESTRATEGIA_ERROR As String
Dim FRAN_DADOS_DIVERG_ERROR As String
Dim TV_PACK_ERROR As String

'Valores de label
Dim IF_LABEL As String
Dim ELSE_LABEL As String
Dim OTHERWISE_LABEL As String

'Constantes de cor
Dim Red As Long
Dim Yellow As Long
Dim Orange As Long
'Colunas de ordenação
'Dim sortColumns As Variant

'Tipos de pacote móvel
Dim PACK_MVL_BASICO As String
Dim PACK_MVL_INTER As String
Dim PACK_MVL_ADV As String
Dim PACK_MVL_TOP As String

Sub Initialize_Cols()
    ESTRATEGIA_COL = 2
    CAMPANHA_COL = 43
    RESUMO_COL = 45
    PLANO_OFERTA_COL = 59
    OFERTA_COL = 58
    PRECO_FX_COL = 61
    PRECO_MVL_COL = 230
    PRECO_SVA_COL = 129
    MULTA_COL = 268
    VAL_MULTA_COL = 270
    FIDELIDADE_COL = 271
    BENEFICIO_TIPO_COL = 275
    LAST_VELOX_COL = 130
    FIRST_VELOX_COL = 66
    STEP_VELOX_COL = 4
    LAST_MOV_FR_COL = 264
    FIRST_MOV_FR_COL = 243
    STEP_MOV_FR_COL = 3
    LAST_TV_COL = 187
    FIRST_TV_COL = 136
    STEP_TV_COL = 3
    FRANQ_DADOS_COL = 242
    
    LABEL_COL = 1
    MOVEL_PKG_COL = 2
    PLANO_FIXO_COL = 3
    PRECO_TARGT_OFR_COL = 4
    DADOS_MVL_COL = 6
    PLANO_TV_DVR_COL = 7
    PRE_SEL_TV_COL = 8
    VELOC_VX_COL = 11
    PRE_SEL_MOVEL_COL = 12
    PRE_SEL_CONT_ONLINE_COL = 26
    FRANQUIA_VCLD_COL = 13
    ALAVANCA_COL = 14
    PRECO_TOTAL_COL = 16
    PRECO_MVL_VOZ_COL = 17
    PRECO_MVL_DADOS_COL = 18
    PRECO_FIXO_FID_COL = 19
    PRECO_LD_CFIDEL_COL = 20
    PRECO_VC_CFIDEL_COL = 21
    PRECO_PLANO_TV_COL = 22
    PRECO_VX_SSVA_COL = 23
    PRECO_VX_CSVA_COL = 24
    PRECO_VX_SVA_FID_COL = 25
    CAMPANHA_VOZ_SLD_SVC_FIDEL_COL = 30
    CAMPANHA_VOZ_SLD_CVC_FIDEL_COL = 31
    CAMPANHA_VOZ_CLD_SVC_FIDEL_COL = 32
    CAMPANHA_VOZ_CLD_CVC_FIDEL_COL = 33
    OFERTA_VOZ_SLD_SVC_FIDEL_COL = 34
    OFERTA_VOZ_SLD_CVC_FIDEL_COL = 35
    OFERTA_VOZ_CLD_SVC_FIDEL_COL = 36
    OFERTA_VOZ_CLD_CVC_FIDEL_COL = 37
    BUNDLE_OFERTA_COL = 38
    MIN_VC_OFERTA_COL = 39
    MIN_LD_OFERTA_COL = 40
    MULTA_FID_COL = 41
    OPCAO_SVA_COL = 42
    OPCAO_SD_COL = 43
    OFERTA_DVR_COL = 44
    FRANQUIA_VC_COL = 45
    TIPO_PRECO_COL = 46
    NIVEL_PRECO_COL = 48
    EMPACK_COL = 47
    MESES_FIDEL_COL = 49
    CLASSIF_PRECO_COL = 50
    
    NEW_LABEL_COL = 1
    NEW_FRANQUIA_VCLD_COL = 13
    NEW_ALAVANCA_COL = 15
    NEW_KEY_COL = 51
    NEW_TIPO_PRECO_COL = 47
    NEW_NIVEL_PRECO_COL = 14
    NEW_MESES_FIDEL_COL = 48
    NEW_EMPACK_COL = 49
    NEW_CLASSIF_PRECO_COL = 50
    
    INI_LINE_PROD = 3
    INI_LINE_RES = 5
    END_COL_RES = 50
    KEY_COL = END_COL_RES + 1
    
    ERROR_WORKSHEET = "Erro"
    ERROR_LINE_COL = "Linha"
    ERROR_MSG_COL = "Mensagem de Erro"
    ErrorLine = 3
    
    ONNET_WORKSHEET = "ONNET"
    ALLNET_WORKSHEET = "ALLNET"
    SFIDEL_WORKSHEET = "Sem Fidelidade"
    SFIDEL_TEMP = "Intermed"

    BENEFICIO_NFOUND_ERROR = "Tipo de Benefício não encontrado"
    COMB_BENEFICIO_ERROR = "Combinação de Tipo de Benefício não prevista"
    SPEED_FMT_ERROR = "Formato ou valor de velocidade não previsto"
    FRANQUIA_NFOUND_ERROR = "Franquia minutos não prevista"
    FRAN_DADOS_NFOUND_ERROR = "Franquia dados não prevista"
    FRANQUIA_FMT_ERROR = "Padrão de plano franquia não encontrado"
    ESTRATEGIA_ERROR = "Estratégia não prevista"
    FRAN_DADOS_DIVERG_ERROR = "Divergência entre plano internet móvel e franquia de dados"
    TV_PACK_ERROR = "Pacote de TV não previsto"

    AQUISICAO_DEFAULT = "Aquisicao"
    MIGRACAO_DEFAULT = "Migracao"
    RETENCAO_DEFAULT = "Retencao"

    IF_LABEL = "if"
    ELSE_LABEL = "else if"
    OTHERWISE_LABEL = "otherwise"
    
    PACK_MVL_BASICO = "Basico"
    PACK_MVL_INTER = "Intermediario"
    PACK_MVL_ADV = "Avancado"
    PACK_MVL_TOP = "Top"

    Red = RGB(255, 0, 0)
    Yellow = RGB(255, 255, 0)
    Orange = RGB(255, 165, 0)

    If WorksheetExists(ERROR_WORKSHEET) Then
        ThisWorkbook.Sheets(ERROR_WORKSHEET).Delete
    End If
    'sortColumns = Array(VELOC_VX_COL, _
    '                    PRE_SEL_CONT_ONLINE_COL, _
    '                    FRANQUIA_VC_LD, _
    '                    PLANO_FIXO_COL, _
    '                    ALAVANCA_COL, _
    '                    PRECO_TOTAL_COL)
End Sub

Sub InsereErro(ByVal errorOrigin As Excel.Worksheet, _
               ByVal insertPoint As Excel.Worksheet, _
               Row As Long, _
               Optional column As Long, _
               Optional errorMessage As String, _
               Optional typeError As ErrorType = xlEtError)
    Dim xlWb As Excel.Worksheet
    Dim xlWbAfter As Excel.Worksheet
    
    If insertPoint Is Nothing Then
        Set xlWbAfter = ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
    Else
        Set xlWbAfter = insertPoint
    End If
    
    If Not WorksheetExists(ERROR_WORKSHEET) Then
        Set xlWb = ThisWorkbook.Sheets.Add(After:=xlWbAfter)
        xlWb.Name = ERROR_WORKSHEET
        With errorOrigin
            .Range(.Cells(1, 1), .Cells(2, 1)).EntireRow.Copy Destination:=xlWb.Cells(1, 1)
            LastColumn = .Cells(2, .Columns.Count).End(xlToLeft).column
        End With
        
        LineColumn = LastColumn + 1
        ErrorColumn = LineColumn + 1
        
        With xlWb
            .Range(.Cells(1, LastColumn), .Cells(2, LastColumn)).Copy
            .Range(.Cells(1, LineColumn), .Cells(2, ErrorColumn)).PasteSpecial xlPasteFormats
            .Cells(2, LineColumn).Value = ERROR_LINE_COL
            .Cells(2, ErrorColumn).Value = ERROR_MSG_COL
        End With
    Else
        Set xlWb = ThisWorkbook.Sheets(ERROR_WORKSHEET)
    End If

    With errorOrigin
        .Range(.Cells(Row, 1), .Cells(Row, LastColumn)).EntireRow.Copy Destination:=xlWb.Cells(ErrorLine, 1)
        .Activate
        If (Not IsEmpty(column)) And (column > 0) Then
            .Range(.Cells(Row, column), .Cells(Row, column)).Select
        Else
            .Range(.Cells(Row, 1), .Cells(Row, LastColumn)).EntireRow.Select
        End If
        If typeError = xlEtError Then
            Selection.Font.Bold = True
            Selection.Font.Color = Red
        ElseIf typeError = xlEtWarning Then
            Selection.Font.Italic = True
            Selection.Font.Color = Orange
        End If
    End With

    With xlWb
        If typeError = xlEtError Then
            .Cells(ErrorLine, LineColumn).Value = "Erro: "
        ElseIf typeError = xlEtWarning Then
            .Cells(ErrorLine, LineColumn).Value = "Alerta: "
        ElseIf typeError = xlEtInfo Then
            .Cells(ErrorLine, LineColumn).Value = "Info: "
        End If
        
        .Cells(ErrorLine, LineColumn).Value = .Cells(ErrorLine, LineColumn).Value & " Linha " & Row
        If (Not IsEmpty(column)) And (column > 0) Then
            .Cells(ErrorLine, LineColumn).Value = .Cells(ErrorLine, LineColumn).Value & ", Coluna: " & column
        End If
        .Cells(ErrorLine, ErrorColumn).Value = errorMessage
    End With
    
    ErrorLine = ErrorLine + 1
End Sub

Sub Conversor(ByVal prodWrkBook As Excel.Workbook)
    Dim estrategia As String
    Dim campanha As String
    Dim plano As String
    Dim oferta As String
    Dim bundle As String
    Dim resumo As String
    Dim precoFX As Double
    Dim precoMVL As Double
    Dim precoData As Double
    Dim precoFr As Double
    Dim tipoPrecoBL As String
    Dim classPreco As String
    Dim franquiaDados As String
    Dim planoDados As String
    Dim packMovel As String
    Dim haMulta As String
    Dim franquiaVC As Long
    Dim franqDados As Long
    Dim planDados As Long
    Dim minVC As Long
    Dim minLD As Long
    Dim velocBL As String
    Dim planoBL As String
    Dim PrecoBL As Double
    Dim precoTV As Double
    Dim precoSVA As Double
    Dim precoDados As Double
    Dim multa As Double
    Dim mesesFidel As Integer
    Dim naFound As Integer
    Dim ldvc As String
    Dim isLD As Boolean
    Dim isVC As Boolean
    Dim isNA As Boolean
    Dim isSVA As Boolean
    Dim isOnNet As Boolean
    Dim isAllNet As Boolean
    Dim isPkg As Boolean
    Dim isFidel As Boolean
    Dim exFranqDados As Boolean
    Dim exPlanoDados As Boolean
    
    Dim Row As Long
    Dim RowU As Long
    Dim rowUSFidel As Long
    Dim rowUAllNet As Long
    Dim rowUOnNet As Long
    Dim i As Long
    Dim j As Long
    Dim ind As Integer
    
    Dim speedVerified() As Boolean
    Dim franqVerified() As Boolean
    
    Dim xlWorkingSheet As String

    Dim thisApp As Excel.Application
    Dim dataSheet As Excel.Worksheet
    Dim updateSheet As Excel.Worksheet
    Dim tempSheet As Excel.Worksheet
    Dim allNetSheet As Excel.Worksheet
    Dim onNetSheet As Excel.Worksheet
    Dim newSheet As Excel.Worksheet
    Dim errorSheet As Excel.Worksheet

    Dim rnSource As Excel.Range
    Dim rnTarget As Excel.Range

    Initialize_Cols

    Set thisApp = prodWrkBook.Parent
    
    Set dataSheet = prodWrkBook.Sheets("Briefing_Conect")
    Set onNetSheet = ThisWorkbook.Sheets(ONNET_WORKSHEET)
    Set allNetSheet = ThisWorkbook.Sheets(ALLNET_WORKSHEET)
    Set tempSheet = ThisWorkbook.Sheets(SFIDEL_TEMP)

    Clean onNetSheet
    Clean allNetSheet
    Clean tempSheet

    rowUSFidel = INI_LINE_RES
    rowUAllNet = INI_LINE_RES
    rowUOnNet = INI_LINE_RES
    Row = INI_LINE_PROD
    
    ReDim speedVerified((LAST_VELOX_COL - FIRST_VELOX_COL) / STEP_VELOX_COL) As Boolean
    ReDim franqVerified((LAST_MOV_FR_COL - FIRST_MOV_FR_COL) / STEP_MOV_FR_COL) As Boolean
    ReDim TVVerified((LAST_TV_COL - FIRST_TV_COL) / STEP_TV_COL) As Boolean

    For ind = LBound(speedVerified) To UBound(speedVerified)
        speedVerified(ind) = False
    Next ind
    For ind = LBound(franqVerified) To UBound(franqVerified)
        franqVerified(ind) = False
    Next ind

    Do While Not (IsEmpty(dataSheet.Cells(Row, CAMPANHA_COL).Value))
        'busca os novos dados
        estrategia = dataSheet.Cells(Row, ESTRATEGIA_COL).Value
        campanha = dataSheet.Cells(Row, CAMPANHA_COL).Value
        resumo = dataSheet.Cells(Row, RESUMO_COL).Value
        bundle = dataSheet.Cells(Row, PLANO_OFERTA_COL).Value
        oferta = dataSheet.Cells(Row, OFERTA_COL).Value
        precoFX = dataSheet.Cells(Row, PRECO_FX_COL).Value
        precoSVA = dataSheet.Cells(Row, PRECO_SVA_COL).Value
        multa = dataSheet.Cells(Row, VAL_MULTA_COL).Value
        mesesFidel = dataSheet.Cells(Row, FIDELIDADE_COL).Value
        precoMVL = dataSheet.Cells(Row, PRECO_MVL_COL).Value
        franquiaDados = dataSheet.Cells(Row, FRANQ_DADOS_COL).Value
        haMulta = dataSheet.Cells(Row, MULTA_COL).Value
         
        If LCase(haMulta) = "sim" Then
            isFidel = True
        Else
            isFidel = False
        End If
        
        plano = "Franquia "
        franquiaVC = 0
        If InStr(LCase(bundle), "pós 100") > 0 Or InStr(LCase(bundle), "pos 100") Then
            isOnNet = True
            isAllNet = False
            franquiaVC = 100
        ElseIf InStr(LCase(bundle), "pós 250") > 0 Or InStr(LCase(bundle), "pos 250") Then
            isOnNet = True
            isAllNet = False
            franquiaVC = 250
        ElseIf InStr(LCase(bundle), "pós 500") > 0 Or InStr(LCase(bundle), "pos 500") Then
            isOnNet = True
            isAllNet = False
            franquiaVC = 500
        ElseIf InStr(LCase(bundle), "pós 50") > 0 Or InStr(LCase(bundle), "pos 50") Then
            isOnNet = True
            isAllNet = False
            franquiaVC = 50
        'ElseIf InStr(LCase(bundle), "pós 800") > 0 Or InStr(LCase(bundle), "pos 800") Then
        '    isOnNet = True
        '    isAllNet = False
        '    franquiaVC = 800
        '    InsereErro dataSheet, updateSheet, Row, errorMessage:=FRANQUIA_NFOUND_ERROR, typeError:=xlEtWarning
        ElseIf InStr(LCase(bundle), "pós conectado 500") > 0 Or InStr(LCase(bundle), "pos conectado 500") Then
            isOnNet = False
            isAllNet = True
            franquiaVC = 500
        ElseIf InStr(LCase(bundle), "pós conectado 1000") > 0 Or InStr(LCase(bundle), "pos conectado 1000") Or _
               InStr(LCase(bundle), "pós conectado 1.000") > 0 Or InStr(LCase(bundle), "pos conectado 1.000") Then
            isOnNet = False
            isAllNet = True
            franquiaVC = 1000
        ElseIf InStr(LCase(bundle), "pós conectado mais") > 0 Or InStr(LCase(bundle), "pos conectado mais") Then
            isOnNet = False
            isAllNet = True
            franquiaVC = 99999
        Else
        '    isOnNet = False
        '    isAllNet = False
        '    franquiaVC = 99999
            InsereErro dataSheet, updateSheet, Row, errorMessage:=FRANQUIA_NFOUND_ERROR
            GoTo ContinueReadLoop
        End If

        If Not isFidel Then
            RowU = rowUSFidel
            NIVEL_PRECO_COL = 48
            EMPACK_COL = 47
            Set updateSheet = tempSheet
        ElseIf isOnNet Then
            RowU = rowUOnNet
            NIVEL_PRECO_COL = 48
            EMPACK_COL = 47
            Set updateSheet = onNetSheet
        ElseIf isAllNet Then
            RowU = rowUAllNet
            NIVEL_PRECO_COL = 47
            EMPACK_COL = 48
            Set updateSheet = allNetSheet
        Else 'should not pass in this part of the code, otherwise there will be error while filling the worksheet
            RowU = INI_LINE_RES
            NIVEL_PRECO_COL = 48
            EMPACK_COL = 47
            Set updateSheet = Nothing
        End If
        
        minLD = 99999
         
        'ldvc = dataSheet.Cells(Row, BENEFICIO_TIPO_COL).Value
        'isLD = False
        'isVC = False
        'isNA = False
        'naFound = InStr(UCase(ldvc), "NA") + InStr(UCase(ldvc), "N/A")
        'ldFound = InStr(UCase(ldvc), "LD")
        'vcFound = InStr(UCase(ldvc), "VC")
         
        If (InStr(LCase(estrategia), "migração") > 0 Or InStr(LCase(estrategia), "migracao") > 0) Then
            estrategia = MIGRACAO_DEFAULT
            isPkg = False
        ElseIf (InStr(LCase(estrategia), "aquisição") > 0 Or InStr(LCase(estrategia), "aquisicao") > 0) Then
            estrategia = AQUISICAO_DEFAULT
            isPkg = True
        ElseIf (InStr(LCase(estrategia), "retenção") > 0 Or InStr(LCase(estrategia), "retencao") > 0) Then
            estrategia = RETENCAO_DEFAULT
            isPkg = False
        Else
            InsereErro dataSheet, updateSheet, Row, errorMessage:=ESTRATEGIA_ERROR
            GoTo ContinueReadLoop
        End If
         
        'If naFound > 0 Then
        '   isNA = True
        'End If
         
        'If ldFound > 0 Then
        '   isLD = True
        'End If
         
        'If vcFound > 0 Then
        '   isVC = True
        'End If
         
        'If (Not isNA) And (Not isLD) And (Not isVC) Then
            'Error
            'InsereErro dataSheet, updateSheet, Row, errorMessage:=BENEFICIO_NFOUND_ERROR
            'ldvc = Empty
        'ElseIf isLD And isVC Then
            'ldvc = """" & "VC LD Ilimitado" & """"
        'ElseIf isLD And (Not isVC) Then
            'ldvc = """" & "LD Ilimitado" & """"
        'ElseIf isNA Then
            'ldvc = """" & "Sem Ilimitado" & """"
        'Else
            'InsereErro dataSheet, updateSheet, Row, errorMessage:=COMB_BENEFICIO_ERROR
            'ldvc = Empty
        'End If
         
        If precoSVA > 0 Then
            isSVA = True
        Else
            isSVA = False
        End If
         
        exFranqDados = True
        franqDados = 0
        If UCase(franquiaDados) = "1GB" Then
            franqDados = 1000
        ElseIf UCase(franquiaDados) = "2GB" Then
            franqDados = 2000
        ElseIf UCase(franquiaDados) = "3GB" Then
            franqDados = 3000
        ElseIf UCase(franquiaDados) = "5GB" Then
            franqDados = 5000
        ElseIf UCase(franquiaDados) = "10GB" Then
            franqDados = 10000
        ElseIf UCase(franquiaDados) = "300MB" Then
            franqDados = 300
        ElseIf UCase(franquiaDados) = "500MB" Then
            franqDados = 500
        ElseIf UCase(franquiaDados) = "" Or IsEmpty(UCase(franquiaDados)) Then
            franqDados = 0
            exFranqDados = False
        Else
            exFranqDados = False
            InsereErro dataSheet, updateSheet, Row, errorMessage:=FRAN_DADOS_NFOUND_ERROR
            GoTo ContinueReadLoop
        End If
        
        exPlanoDados = False
        planDados = 0
        precoFr = 0
        
        i = FIRST_MOV_FR_COL
        Do While i < LAST_MOV_FR_COL
            planoDados = dataSheet.Cells(1, i).Value
            precoDados = dataSheet.Cells(Row, i).Value
            
            If (Not IsEmpty(precoDados)) And (precoDados <> 0) Then
                exPlanoDados = True
                precoFr = precoDados
                
                If InStr(UCase(planoDados), "1GB") > 0 Then
                    planDados = 1000
                ElseIf InStr(UCase(planoDados), "2GB") > 0 Then
                    planDados = 2000
                ElseIf InStr(UCase(planoDados), "3GB") > 0 Then
                    planDados = 3000
                ElseIf InStr(UCase(planoDados), "5GB") > 0 Then
                    planDados = 5000
                ElseIf InStr(UCase(planoDados), "10GB") > 0 Then
                    planDados = 10000
                ElseIf InStr(UCase(planoDados), "300MB") > 0 Then
                    planDados = 300
                ElseIf InStr(UCase(planoDados), "500MB") > 0 Then
                    planDados = 500
                Else
                    If Not franqVerified((LAST_MOV_FR_COL - i) / STEP_MOV_FR_COL) Then
                        InsereErro dataSheet, updateSheet, Row, column:=i, errorMessage:=FRANQUIA_FMT_ERROR
                        GoTo ContinueReadLoop
                    End If
                End If
                
                Exit Do
            End If
         
            i = i + STEP_MOV_FR_COL
        Loop

        If (exFranqDados <> exPlanoDados) Or (franqDados <> planDados) Then
            InsereErro dataSheet, updateSheet, Row, errorMessage:=FRAN_DADOS_DIVERG_ERROR
            GoTo ContinueReadLoop
        End If
        
        If isOnNet Then
            plano = plano & franquiaVC & " min + ilimitado Oi"
            minVC = 99999
        ElseIf isAllNet Then
            If franquiaVC = 99999 Then
                plano = plano & "ilimitada"
            Else
                plano = plano & franquiaVC & " min"
            End If
            minVC = 0
        Else
            InsereErro dataSheet, updateSheet, Row, errorMessage:=FRANQUIA_NFOUND_ERROR
            GoTo ContinueReadLoop
        End If

        packMovel = ""
        If franquiaVC = 50 Then
            packMovel = PACK_MVL_BASICO
        ElseIf franquiaVC = 100 Then
            packMovel = PACK_MVL_INTER
        ElseIf franquiaVC = 250 Then
            packMovel = PACK_MVL_ADV
        ElseIf franquiaVC = 500 Then
            If isOnNet Then
                packMovel = PACK_MVL_TOP
            ElseIf isAllNet Then
                packMovel = PACK_MVL_BASICO
            End If
        ElseIf franquiaVC = 1000 Then
            If franqDados <= 5000 Then
                packMovel = PACK_MVL_INTER
            Else
                packMovel = PACK_MVL_ADV
            End If
        ElseIf franquiaVC = 99999 Then
            packMovel = PACK_MVL_TOP
        End If
                
        i = FIRST_VELOX_COL
        Do While i < LAST_VELOX_COL
            velocBL = dataSheet.Cells(1, i).Value

            If InStr(LCase(velocBL), "internet móvel substituta") > 0 Then
                tipoPrecoBL = dataSheet.Cells(Row, i + 2).Value
                If tipoPrecoBL <> "" Then
                    tipoPrecoBL = "Criar"
                End If
                PrecoBL = dataSheet.Cells(Row, i).Value
            Else
                tipoPrecoBL = dataSheet.Cells(Row, i).Value
                PrecoBL = dataSheet.Cells(Row, i + 1).Value
            End If

            If InStr(tipoPrecoBL, "Comercial") > 0 Or InStr(tipoPrecoBL, "Criar") > 0 Then
                If InStr(LCase(velocBL), "300kb") > 0 Or _
                    InStr(LCase(velocBL), "600kb") > 0 Or _
                    InStr(LCase(velocBL), "1mb") > 0 Or _
                    InStr(LCase(velocBL), "2mb") > 0 Then
                    planoBL = """VX Até 2mb"""
                ElseIf InStr(LCase(velocBL), "20mb") > 0 Or _
                        InStr(LCase(velocBL), "25mb") > 0 Then
                    planoBL = """VX Até 25mb"""
                ElseIf InStr(LCase(velocBL), "30mb") > 0 Or _
                        InStr(LCase(velocBL), "35mb") > 0 Then
                    planoBL = """VX 35mb"""
                ElseIf InStr(LCase(velocBL), "5mb") > 0 Or _
                        InStr(LCase(velocBL), "10mb") > 0 Or _
                        InStr(LCase(velocBL), "15mb") > 0 Then
                    planoBL = """VX Até 15mb"""
                ElseIf InStr(LCase(velocBL), "internet móvel substituta") > 0 Then
                    planoBL = """BLM 10gb"""
                Else
                    planoBL = Empty
                    If Not speedVerified((LAST_VELOX_COL - i) / STEP_VELOX_COL) Then
                        speedVerified((LAST_VELOX_COL - i) / STEP_VELOX_COL) = True
                        InsereErro dataSheet, updateSheet, Row, column:=i, errorMessage:=SPEED_FMT_ERROR
                    End If
                    GoTo ContinueReadLoop
                End If

                j = FIRST_TV_COL
                Do While j < LAST_TV_COL
                    pacoteTVTemp = dataSheet.Cells(1, j).Value
                    precoTV = dataSheet.Cells(Row, j).Value
            
                    If (Not IsEmpty(precoTV)) And (precoTV <> 0) Then
                        'de-para pacote TV
                        If InStr(LCase(pacoteTVTemp), "start hd") > 0 Then
                            pacoteTV = """" & "TV Start HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "mix hd") > 0 Then
                            pacoteTV = """" & "TV Mix HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "mix hbo hd") > 0 Or _
                               InStr(LCase(pacoteTVTemp), "mix hbo max hd") > 0 Or _
                               InStr(LCase(pacoteTVTemp), "mix hbomax hd") > 0 Then
                            pacoteTV = """" & "TV Mix HBOMAX HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "mix telecine hd") > 0 Then
                            pacoteTV = """" & "TV Mix Telecine HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "mix cinema hd") > 0 Then
                            pacoteTV = """" & "TV Mix Cinema HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "total hbo hd") > 0 Or _
                               InStr(LCase(pacoteTVTemp), "total hbo max hd") > 0 Or _
                               InStr(LCase(pacoteTVTemp), "total hbomax hd") > 0 Then
                            pacoteTV = """" & "TV Total HBOMAX HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "total cinema hd") > 0 Then
                            pacoteTV = """" & "TV Total Cinema HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "total hd") > 0 Then
                            pacoteTV = """" & "TV Total HD" & """"
                        ElseIf InStr(LCase(pacoteTVTemp), "total telecine hd") > 0 Then
                            pacoteTV = """" & "TV Total Telecine HD" & """"
                        Else
                            pacoteTV = Empty
                            If Not TVVerified((LAST_TV_COL - j) / STEP_TV_COL) Then
                                TVVerified((LAST_TV_COL - j) / STEP_TV_COL) = True
                                InsereErro dataSheet, updateSheet, Row, column:=i, errorMessage:=TV_PACK_ERROR
                                GoTo ContinueReadLoop
                            End If
                        End If
        
                        'DVR
                        If InStr(UCase(pacoteTVTemp), "DVR") > 0 Then
                            isDVR = True
                        Else
                            isDVR = False
                        End If
            
                        updateSheet.Cells(RowU, MOVEL_PKG_COL).Value = """" & packMovel & """"
                        updateSheet.Cells(RowU, PLANO_FIXO_COL).Value = """" & "Fixo Ilimitado" & """"
                        updateSheet.Cells(RowU, PRECO_TARGT_OFR_COL).Value = 99999
                        updateSheet.Cells(RowU, DADOS_MVL_COL).Value = franqDados
                        updateSheet.Cells(RowU, PLANO_TV_DVR_COL).Value = isDVR
                        updateSheet.Cells(RowU, PRE_SEL_TV_COL).Value = pacoteTV
                        updateSheet.Cells(RowU, PRE_SEL_CONT_ONLINE_COL).Value = ""
                        updateSheet.Cells(RowU, PRE_SEL_MOVEL_COL).Value = """" & LCase(plano) & """"
                        updateSheet.Cells(RowU, FRANQUIA_VCLD_COL).Value = ""
                        updateSheet.Cells(RowU, ALAVANCA_COL).Value = """" & "RetencaoOT" & """"
                        updateSheet.Cells(RowU, PRECO_TOTAL_COL).Value = (PrecoBL + precoFX + precoTV + precoMVL + precoFr)
                        updateSheet.Cells(RowU, PRECO_MVL_VOZ_COL).Value = precoMVL + precoFr
                        'If precoFr <> 0 Then
                        '    updateSheet.Cells(RowU, PRECO_MVL_DADOS_COL).Value = precoFr '?????
                        'End If
                        updateSheet.Cells(RowU, PRECO_MVL_DADOS_COL).Value = ""
                        updateSheet.Cells(RowU, PRECO_FIXO_FID_COL).Value = precoFX
                        updateSheet.Cells(RowU, PRECO_PLANO_TV_COL).Value = precoTV
                        updateSheet.Cells(RowU, PRECO_LD_CFIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, PRECO_VC_CFIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, PRECO_VX_SSVA_COL).Value = PrecoBL
                        updateSheet.Cells(RowU, PRECO_VX_CSVA_COL).Value = PrecoBL
                        updateSheet.Cells(RowU, PRECO_VX_SVA_FID_COL).Value = 0
                        updateSheet.Cells(RowU, CAMPANHA_VOZ_SLD_SVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, CAMPANHA_VOZ_SLD_CVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, CAMPANHA_VOZ_CLD_SVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, CAMPANHA_VOZ_CLD_CVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, OFERTA_VOZ_SLD_SVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, OFERTA_VOZ_SLD_CVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, OFERTA_VOZ_CLD_SVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, OFERTA_VOZ_CLD_CVC_FIDEL_COL).Value = ""
                        updateSheet.Cells(RowU, BUNDLE_OFERTA_COL).Value = """" & LCase(bundle) & """"
                        updateSheet.Cells(RowU, MULTA_FID_COL).Value = multa
                        updateSheet.Cells(RowU, OPCAO_SVA_COL).Value = True
                        updateSheet.Cells(RowU, OPCAO_SD_COL).Value = True
                        updateSheet.Cells(RowU, TIPO_PRECO_COL).Value = """" & AQUISICAO_DEFAULT & """"
                        updateSheet.Cells(RowU, MESES_FIDEL_COL).Value = mesesFidel
                        updateSheet.Cells(RowU, MIN_VC_OFERTA_COL).Value = minVC
                        updateSheet.Cells(RowU, MIN_LD_OFERTA_COL).Value = minLD
                        updateSheet.Cells(RowU, OFERTA_DVR_COL).Value = isDVR
                        updateSheet.Cells(RowU, FRANQUIA_VC_COL).Value = franquiaVC
                        updateSheet.Cells(RowU, CLASSIF_PRECO_COL).Value = """" & estrategia & """"
                        updateSheet.Cells(RowU, EMPACK_COL).Value = isPkg
                        updateSheet.Cells(RowU, VELOC_VX_COL).Value = planoBL

                        If isAllNet Then
                            updateSheet.Cells(RowU, CAMPANHA_VOZ_CLD_SVC_FIDEL_COL).Value = campanha
                            updateSheet.Cells(RowU, OFERTA_VOZ_CLD_SVC_FIDEL_COL).Value = oferta
                        End If

                        If isOnNet Then
                            updateSheet.Cells(RowU, CAMPANHA_VOZ_CLD_CVC_FIDEL_COL).Value = campanha
                            updateSheet.Cells(RowU, OFERTA_VOZ_CLD_CVC_FIDEL_COL).Value = oferta
                        End If
                
                        'If isSVA Then
                        '    updateSheet.Cells(rowU, PRECO_VX_CSVA_COL).Value = PrecoBL
                        'Else
                        '    updateSheet.Cells(rowU, PRECO_VX_SSVA_COL).Value = PrecoBL
                        'End If
                
                        updateSheet.Cells(RowU, KEY_COL).Value = updateSheet.Cells(RowU, PLANO_TV_DVR_COL).Value & _
                                                                 updateSheet.Cells(RowU, PRE_SEL_TV_COL).Value & _
                                                                 updateSheet.Cells(RowU, VELOC_VX_COL).Value & _
                                                                 updateSheet.Cells(RowU, MOVEL_PKG_COL).Value & _
                                                                 updateSheet.Cells(RowU, DADOS_MVL_COL).Value & _
                                                                 updateSheet.Cells(RowU, PRE_SEL_MOVEL_COL).Value & _
                                                                 updateSheet.Cells(RowU, FRANQUIA_VCLD_COL).Value & _
                                                                 updateSheet.Cells(RowU, PLANO_FIXO_COL).Value & _
                                                                 updateSheet.Cells(RowU, ALAVANCA_COL).Value

                        RowU = RowU + 1
                    End If
                    
                    j = j + STEP_TV_COL
                Loop
            End If
            'Cada produto possui 4 colunas padronizadas na planilha original:
            'Comercial/Tratamento, Comercial (preço), % Desc e Código
            i = i + STEP_VELOX_COL
        Loop

        If Not isFidel Then
            rowUSFidel = RowU
        ElseIf isOnNet Then
            rowUOnNet = RowU
        ElseIf isAllNet Then
            rowUAllNet = RowU
        Else 'should not pass in this part of the code, an error would have happenned while filling the worksheet
            RowU = RowU + 1
        End If
 
ContinueReadLoop:
        'novoValor = Application.WorksheetFunction.VLookup(valor, namesMatch.Range("B2:D16"), 3, False)
        Row = Row + 1
    Loop
    
    'With ThisWorkbook
    '    Set newSheet = .Sheets.Add(After:=.Sheets(.Sheets.Count))
    '    newSheet.Name = "DT_TO_UPDATE"
    'End With
    'rnTarget = newSheet.Range(INI_LINE_RES, 1)
    
    'Remove duplicidade do resultado final
    With onNetSheet
        'Concatenação da chave, porque RemoveDuplicates só permite Arrays de 2 posições no máximo.
'        .Cells(INI_LINE_RES, KEY_COL).FillDown
        Set rnSource = .Range(.Cells(INI_LINE_RES, 1), .Cells(rowUOnNet - 1, KEY_COL))
        rnSource.Sort key1:=.Range(.Cells(INI_LINE_RES, KEY_COL), .Cells(rowUOnNet - 1, KEY_COL)), _
                      key2:=.Range(.Cells(INI_LINE_RES, PRECO_TOTAL_COL), .Cells(rowUOnNet - 1, PRECO_TOTAL_COL))
        rnSource.RemoveDuplicates Columns:=Array(KEY_COL, PRECO_TOTAL_COL), Header:=xlNo
        .Columns(KEY_COL).EntireColumn.Hidden = True
    End With
    
    With allNetSheet
        'Concatenação da chave, porque RemoveDuplicates só permite Arrays de 2 posições no máximo.
'        .Cells(INI_LINE_RES, KEY_COL).FillDown
        Set rnSource = .Range(.Cells(INI_LINE_RES, 1), .Cells(rowUAllNet - 1, KEY_COL))
        rnSource.Sort key1:=.Range(.Cells(INI_LINE_RES, KEY_COL), .Cells(rowUAllNet - 1, KEY_COL)), _
                      key2:=.Range(.Cells(INI_LINE_RES, PRECO_TOTAL_COL), .Cells(rowUAllNet - 1, PRECO_TOTAL_COL))
        rnSource.RemoveDuplicates Columns:=Array(KEY_COL, PRECO_TOTAL_COL), Header:=xlNo
        .Columns(KEY_COL).EntireColumn.Hidden = True
    End With

    With tempSheet
        'Concatenação da chave, porque RemoveDuplicates só permite Arrays de 2 posições no máximo.
'        .Cells(INI_LINE_RES, KEY_COL).FillDown
        Set rnSource = .Range(.Cells(INI_LINE_RES, 1), .Cells(rowUSFidel - 1, KEY_COL))
        rnSource.Sort key1:=.Range(.Cells(INI_LINE_RES, KEY_COL), .Cells(rowUSFidel - 1, KEY_COL)), _
                      key2:=.Range(.Cells(INI_LINE_RES, PRECO_TOTAL_COL), .Cells(rowUSFidel - 1, PRECO_TOTAL_COL))
        rnSource.RemoveDuplicates Columns:=Array(KEY_COL, PRECO_TOTAL_COL), Header:=xlNo
        .Columns(KEY_COL).EntireColumn.Hidden = True
        
        'Move data to final worksheet
        Set newSheet = ThisWorkbook.Sheets(SFIDEL_WORKSHEET)
        Clean newSheet

        'Cut data from original worksheet to new worksheet
        Set rnSource = .Range(.Cells(INI_LINE_RES, LABEL_COL), .Cells(rowUSFidel, FRANQUIA_VCLD_COL))
        rnSource.Cut Destination:=newSheet.Cells(INI_LINE_RES, NEW_LABEL_COL)
        Set rnSource = .Range(.Cells(INI_LINE_RES, NIVEL_PRECO_COL), .Cells(rowUSFidel, NIVEL_PRECO_COL))
        rnSource.Cut Destination:=newSheet.Cells(INI_LINE_RES, NEW_NIVEL_PRECO_COL)
        Set rnSource = .Range(.Cells(INI_LINE_RES, ALAVANCA_COL), .Cells(rowUSFidel, TIPO_PRECO_COL))
        rnSource.Cut Destination:=newSheet.Cells(INI_LINE_RES, NEW_ALAVANCA_COL)
        Set rnSource = .Range(.Cells(INI_LINE_RES, EMPACK_COL), .Cells(rowUSFidel, EMPACK_COL))
        rnSource.Cut Destination:=newSheet.Cells(INI_LINE_RES, NEW_EMPACK_COL)
        Set rnSource = .Range(.Cells(INI_LINE_RES, MESES_FIDEL_COL), .Cells(rowUSFidel, MESES_FIDEL_COL))
        rnSource.Cut Destination:=newSheet.Cells(INI_LINE_RES, NEW_MESES_FIDEL_COL)
        Set rnSource = .Range(.Cells(INI_LINE_RES, CLASSIF_PRECO_COL), .Cells(rowUSFidel, KEY_COL))
        rnSource.Cut Destination:=newSheet.Cells(INI_LINE_RES, NEW_CLASSIF_PRECO_COL)
    End With

    'Use AdvancedFilter to copy the data from the source to the target,
    'while filtering for duplicate values.
    'With updateSheet
    '    rnSource = .Range(.Cells(INI_LINE_RES, 1), .Cells(rowU - 1, END_COL_RES))
    '    rnSource.AdvancedFilter Action:=xlFilterCopy, CopyToRange:=rnTarget, Unique:=True
    'End With
End Sub

Private Sub WrkBookAvg(Optional xlSheet As Excel.Worksheet)
    Dim Row As Long
    
    Dim dataSheet As Excel.Worksheet
    
    If xlSheet Is Nothing Then
        Set dataSheet = ThisWorkbook.Sheets(1)
    ElseIf WorksheetExists(xlSheet.Name) Then
        Set dataSheet = xlSheet
    Else
        Set dataSheet = ThisWorkbook.Sheets(1)
    End If
    
    Row = INI_LINE_RES
    
    Do While Not (IsEmpty(dataSheet.Cells(Row, KEY_COL).Value))
        If dataSheet.Cells(Row, KEY_COL).Value = dataSheet.Cells(Row + 1, KEY_COL).Value Then
            dataSheet.Cells(Row, PRECO_TARGT_OFR_COL).Value = _
            (dataSheet.Cells(Row, PRECO_TOTAL_COL).Value + _
             dataSheet.Cells(Row + 1, PRECO_TOTAL_COL).Value) / 2
        End If

        If Row <> INI_LINE_RES Then
            dataSheet.Cells(Row, LABEL_COL) = ELSE_LABEL
        Else
            dataSheet.Cells(Row, LABEL_COL) = IF_LABEL
        End If
        
        Row = Row + 1
    Loop
    
    dataSheet.Cells(Row, LABEL_COL) = OTHERWISE_LABEL
End Sub

Private Sub Clean(Optional xlSheet As Excel.Worksheet)
    Dim rowI As Long
    Dim rowL As Long
    
    Dim dataSheet As Excel.Worksheet
    
    If xlSheet Is Nothing Then
        Set dataSheet = ThisWorkbook.Sheets(1)
    ElseIf WorksheetExists(xlSheet.Name) Then
        Set dataSheet = xlSheet
    Else
        Set dataSheet = ThisWorkbook.Sheets(1)
    End If
    
    With dataSheet
        rowI = INI_LINE_RES
        rowL = .Cells(.Rows.Count, PLANO_FIXO_COL).End(xlUp).Row

        If rowI <= rowL Then
            .Range(.Cells(rowI, 1), .Cells(rowL + 1, KEY_COL)).ClearContents
        End If
    End With
End Sub

Sub BtnImport_Click()
    Dim strFileToOpen As String
    Dim newFile As String
    Dim currentFile As String
    
    Dim rowLOnNet As Long
    Dim rowLAllNet As Long
    Dim rowLSFidel As Long
    
    Dim actBook As Excel.Workbook
    Dim prodWrkBook As Excel.Workbook
    
    Application.ScreenUpdating = False
    
    currentFile = ThisWorkbook.FullName
    
    strFileToOpen = Application.GetOpenFilename(Title:="Please choose a file to open", _
                                                fileFilter:="Excel Files *.xls* (*.xls*),")

    If strFileToOpen = "False" Or strFileToOpen = "" Then
        MsgBox "No file selected.", vbExclamation, "Sorry!"
        Exit Sub
    End If
        
    Set prodWrkBook = Workbooks.Open(Filename:=strFileToOpen)
    
    Conversor prodWrkBook
    
        'Verifica se arquivo Com Fidelidade está vazio
    If WorksheetExists(ONNET_WORKSHEET) Then
        With ThisWorkbook.Sheets(ONNET_WORKSHEET)
            rowLOnNet = .Cells(.Rows.Count, PLANO_FIXO_COL).End(xlUp).Row
        End With
    End If

    If WorksheetExists(ALLNET_WORKSHEET) Then
        With ThisWorkbook.Sheets(ALLNET_WORKSHEET)
            rowLAllNet = .Cells(.Rows.Count, PLANO_FIXO_COL).End(xlUp).Row
        End With
    End If

    If rowLOnNet >= INI_LINE_RES Or rowLAllNet >= INI_LINE_RES Then
        newFile = Application.GetSaveAsFilename(InitialFileName:=NewFileName, _
                                                fileFilter:="Excel Files *.xls* (*.xls*),", _
                                                Title:="Save As - OnNet e AllNet")
    Else
        newFile = ""
    End If
                                            
    If newFile <> "" And newFile <> "False" Then
        If InStr(LCase(newFile), ".xls") <= 0 Then
            newFile = Trim(newFile) & "xlsx"
        End If
        If InStr(LCase(newFile), ".") <= 0 Then
            newFile = Trim(newFile) & ".xlsx"
        End If

        ThisWorkbook.Sheets(ONNET_WORKSHEET).Copy
        Set actBook = ActiveWorkbook
        
        With actBook.Sheets(1)
            .Name = ONNET_WORKSHEET
            .Buttons.Delete
            .Range(.Cells(1, 1), .Cells(2, 1)).EntireRow.Delete
        End With

        ThisWorkbook.Sheets(ALLNET_WORKSHEET).Copy After:=actBook.Sheets(actBook.Sheets.Count)
        
        With actBook.Sheets(actBook.Sheets.Count)
            .Name = ALLNET_WORKSHEET
            .Buttons.Delete
            .Range(.Cells(1, 1), .Cells(2, 1)).EntireRow.Delete
        End With

        If WorksheetExists(ERROR_WORKSHEET) Then
            ThisWorkbook.Sheets(ERROR_WORKSHEET).Copy After:=actBook.Sheets(actBook.Sheets.Count)
        End If
        
        actBook.SaveAs Filename:=newFile, _
                       FileFormat:=xlOpenXMLWorkbook, _
                       CreateBackup:=False

        actBook.Close
    End If
    
    If WorksheetExists(SFIDEL_WORKSHEET) Then
        With ThisWorkbook.Sheets(SFIDEL_WORKSHEET)
            rowLSFidel = .Cells(.Rows.Count, PLANO_FIXO_COL).End(xlUp).Row
        End With
    End If

    If rowLSFidel >= INI_LINE_RES Then
        newFile = Application.GetSaveAsFilename(InitialFileName:=NewFileName, _
                                                fileFilter:="Excel Files *.xls* (*.xls*),", _
                                                Title:="Save As - Sem Fidelidade")
    Else
        newFile = ""
    End If
    
    If newFile <> "" And newFile <> "False" Then
        If InStr(LCase(newFile), ".xls") <= 0 Then
            newFile = Trim(newFile) & "xlsx"
        End If
        If InStr(LCase(newFile), ".") <= 0 Then
            newFile = Trim(newFile) & ".xlsx"
        End If

        ThisWorkbook.Sheets(SFIDEL_WORKSHEET).Copy
        Set actBook = ActiveWorkbook

        With actBook.Sheets(1)
            .Name = SFIDEL_WORKSHEET
            .Buttons.Delete
            .Range(.Cells(1, 1), .Cells(2, 1)).EntireRow.Delete
        End With

        If rowLOnNet < INI_LINE_RES And rowLAllNet < INI_LINE_RES And WorksheetExists(ERROR_WORKSHEET) Then
            ThisWorkbook.Sheets(ERROR_WORKSHEET).Copy After:=actBook.Sheets(actBook.Sheets.Count)
        End If
        
        actBook.SaveAs Filename:=newFile, _
                       FileFormat:=xlOpenXMLWorkbook, _
                       CreateBackup:=False

        actBook.Close
    End If
        
    If rowLOnNet < INI_LINE_RES And _
       rowLAllNet < INI_LINE_RES And _
       rowLSFidel < INI_LINE_RES And _
       WorksheetExists(ERROR_WORKSHEET) Then
        newFile = Application.GetSaveAsFilename(InitialFileName:=NewFileName, _
                                                fileFilter:="Excel Files *.xls* (*.xls*),", _
                                                Title:="Save As - Erros processamento")
                                                
        If newFile <> "" And newFile <> "False" Then
            If InStr(LCase(newFile), ".xls") <= 0 Then
                newFile = Trim(newFile) & "xlsx"
            End If
            If InStr(LCase(newFile), ".") <= 0 Then
                newFile = Trim(newFile) & ".xlsx"
            End If

            ThisWorkbook.Sheets(ERROR_WORKSHEET).Copy
            Set actBook = ActiveWorkbook
            With actBook.Sheets(1)
                .Name = ERROR_WORKSHEET
                .SaveAs Filename:=newFile, _
                        FileFormat:=xlOpenXMLWorkbook, _
                        CreateBackup:=False
            End With
            actBook.Close
        End If
    End If

    Workbooks.Open currentFile
    prodWrkBook.Close

    Application.ScreenUpdating = True
End Sub

Function WorksheetExists(sheetName As String, Optional wb As Excel.Workbook)
    Dim s As Excel.Worksheet
    
    If wb Is Nothing Then Set wb = ThisWorkbook
    
    On Error Resume Next
    Set s = wb.Sheets(sheetName)
    If Err.Number > 0 Then
        WorksheetExists = False
    Else
        WorksheetExists = True
    End If
    On Error GoTo 0
End Function
